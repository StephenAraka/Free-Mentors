{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "Free-Mentors",
        "description": "Free Mentors is a social initiative where accomplished professionals become role models to young people to provide free mentorship sessions.",
        "license": {
            "name": "MIT",
            "url": "https://github.com/StephenAraka/Free-Mentors"
        }
    },
    "basePath": "/api/v1/",
    "tags": [
        {
            "name": "Mentors",
            "description": "Users to Mentors API"
        },
        {
            "name": "Free Mentors",
            "description": "Free Mentors API"
        },
        {
            "name": "Mentors",
            "description": "Users to Mentors API"
        }
    ],
    "schemes": [
        "https",
        "http"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/auth/signup": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "User signup",
                "description": "Creates a new user",
                "parameters": [
                    {
                        "name": "users",
                        "in": "body",
                        "description": "Users to be created",
                        "schema": {
                            "$ref": "#/definitions/signup"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "user created successfully"
                    },
                    "403": {
                        "description": "Unauthorized access"
                    }
                }
            }
        },
        "/auth/signin": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Login a user",
                "description": "Login an existing user",
                "parameters": [
                    {
                        "name": "users",
                        "in": "body",
                        "description": "Login an existing user",
                        "schema": {
                            "$ref": "#/definitions/signin"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "User logged in successfully"
                    },
                    "403": {
                        "description": [
                            "Access forbidded",
                            "Wrong email or password"
                        ]
                    }
                }
            }
        },
        "/auth/admin/signin": {
            "post": {
                "tags": [
                    "Admin"
                ],
                "summary": "Login an admin",
                "description": "Login an existing Admin",
                "parameters": [
                    {
                        "name": "admin",
                        "in": "body",
                        "description": "Login an existing admin",
                        "schema": {
                            "$ref": "#/definitions/admin/signin"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Admin logged in successfully"
                    },
                    "403": {
                        "description": [
                            "Access forbidden",
                            "Wrong email or password"
                        ]
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "Users",
                    "Mentors"
                ],
                "summary": "Get all users",
                "description": "Admin can view all users",
                "parameters": [
                    {
                        "name": "token",
                        "in": "header",
                        "description": "Check token authentication",
                        "required": true
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    201: {
                        "description": "success: Trip created Successfully"
                    },
                    400: {
                        "description": "Error: Bad request"
                    },
                    401: {
                        "description": "Error: you are not admin"
                    }
                }
            },
    get: {
    tags: [
                    "Trip"
                ],
    summary: "view all trip created or filter trip",
    description: "you can view all trip created by admin in the system some are active and cancelled. also you can filter trip based on origin or destination or both",
    parameters: [
                    {
    name: "token",
    in: "header",
    description: "Check token authentication",
    required: true
                    },
                    {
    name: "origin",
    in: "query",
    description: "filter origin",
    required: false,
    type: "string"
                    },
                    {
    name: "destination",
    in: "query",
    description: "filter destination",
    required: false,
    type: "string"
                    }
                ],
    produces: [
                    "application/json"
                ],
    responses: {
                    200: {
    description: "Success: retrieved a trips"
                    },
                    404: {
    description: "Error: not trip found"
                    }
                }
            }
        },
    /trips/{trip_id
        }: {
    get: {
    tags: [
                    "Trip"
                ],
    summary: "View a specific trip",
    description: "the admin can view a specific trip",
    parameters: [
                    {
    name: "token",
    in: "header",
    description: "Check token authentication",
    required: true
                    },
                    {
    name: "trip_id",
    in: "path",
    description: "enter the trip id you want",
    required: true,
    type: "integer"
                    }
                ],
    produces: [
                    "application/json"
                ],
    responses: {
                    200: {
    description: "success: result found"
                    },
                    400: {
    description: "Error: bad request"
                    },
                    404: {
    description: "Error: result not found"
                    }
                }
            }
        },
    /trips/{trip_id
        }/cancel: {
    patch: {
    tags: [
                    "Trip"
                ],
    summary: "Admin cancel trip",
    description: "Admin is only allowed to cancel trip with given ID",
    parameters: [
                    {
    name: "token",
    in: "header",
    description: "The user token",
    required: true
                    },
                    {
    name: "trip_id",
    in: "path",
    description: "trip id",
    required: true,
    type: "integer"
                    }
                ],
    produces: [
                    "application/json"
                ],
    responses: {
                    200: {
    description: "Success: trip cancelled successfully"
                    },
                    400: {
    description: "Bad Error"
                    },
                    401: {
    description: "Error: authentication error"
                    }
                }
            }
        },
    /bookings: {
    post: {
    tags: [
                    "Booking"
                ],
    summary: "Book a seat on trip",
    description: "Users can book a seat on trip",
    parameters: [
                    {
    name: "token",
    in: "header",
    description: "Check token authentication",
    required: true
                    },
                    {
    name: "Booking input",
    in: "body",
    description: "Provide input info",
    schema: {
    $ref: "#/definitions/booking"
                        }
                    }
                ],
    produces: [
                    "application/json"
                ],
    responses: {
                    201: {
    description: "Sucess: booking created successfully"
                    },
                    400: {
    description: "Error: Bad request"
                    },
                    401: {
    description: "Error: authentication error"
                    }
                }
            },
    get: {
    tags: [
                    "Booking"
                ],
    summary: "View all booking",
    description: "Users and admin can view all trip",
    parameters: [
                    {
    name: "token",
    in: "header",
    description: "Check token authentication",
    required: true
                    }
                ],
    produces: [
                    "application/json"
                ],
    responses: {
                    200: {
    description: "Success: View all bookings"
                    },
                    401: {
    description: "Authentication error"
                    },
                    404: {
    description: "Error: no booking record"
                    }
                }
            }
        },
    /bookings/{booking_id
        }: {
    delete: {
    tags: [
                    "Booking"
                ],
    summary: "Delete a booking",
    description: "Users can delete booking he/she made. no one can delete others booking",
    parameters: [
                    {
    name: "token",
    in: "header",
    description: "Check token authentication",
    required: true
                    },
                    {
    name: "booking_id",
    in: "path",
    description: "booking id",
    required: true,
    type: "integer"
                    }
                ],
    produces: [
                    "application/json"
                ],
    responses: {
                    200: {
    description: "Success: Deleted successfully"
                    },
                    401: {
    description: "Error: Authentication error"
                    },
                    403: {
    description: "Error: Forbiden action"
                    },
                    404: {
    description: "Error: no booking record"
                    }
                }
            }
        },
    /bookings/{book_no
        }: {
    patch: {
    tags: [
                    "Booking"
                ],
    summary: "User specify seat number",
    description: "User should provide the desired seat number and also the booking id of particular trip",
    produces: [
                    "application/json"
                ],
    parameters: [
                    {
    name: "token",
    in: "header",
    description: "Check token authentication",
    required: true
                    },
                    {
    name: "book_no",
    in: "path",
    description: "book no",
    required: true,
    type: "integer"
                    },
                    {
    name: "booking seat is specified",
    in: "body",
    schema: {
    $ref: "#/definitions/specifySeat"
                        }
                    }
                ],
    responses: {
                    200: {
    description: "Success: Seat Specificied successfully"
                    },
                    400: {
    description: "Error: bad request"
                    },
                    401: {
    description: "Error: Authentication error"
                    },
                    403: {
    description: "Error: Forbiden action"
                    },
                    404: {
    description: "Error: not book found"
                    }
                }
            }
        }
    },
    definitions: {
    signup: {
    required: [
                "email",
                "password",
                "first_name",
                "last_name"
            ],
    type: "object",
    properties: {
    email: {
    type: "string"
                },
    password: {
    type: "string"
                },
    first_name: {
    type: "string"
                },
    last_name: {
    type: "string"
                }
            }
        },
    signin: {
    required: [
                "email",
                "password"
            ],
    type: "object",
    properties: {
    email: {
    type: "string"
                },
    password: {
    type: "string"
                }
            }
        },
    trip: {
    required: [
                "seating_capacity",
                "bus_license_number",
                "origin",
                "destination",
                "trip_date",
                "fare"
            ],
    type: "object",
    properties: {
    seating_capacity: {
    type: "integer"
                },
    bus_license_number: {
    type: "string"
                },
    origin: {
    type: "string"
                },
    destination: {
    type: "string"
                },
    trip_date: {
    type: "date-time"
                },
    fare: {
    type: "integer"
                }
            }
        },
    booking: {
    required: [
                "trip_id"
            ],
    type: "object",
    properties: {
    trip_id: {
    type: "integer"
                }
            }
        },
    specifySeat: {
    required: [
                "seat_no"
            ],
    properties: {
    seat_no: {
    type: "integer"
                }
            }
        }
    }
}